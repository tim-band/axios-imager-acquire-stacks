<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text># Acquire a stack of images from positions recorded on a
# large tiled image

# Experiment files used:
# AcquireStacksTileTL - Used to create a tiled image with transmitted light
# AcquireStacksFocusRL - Used to focus on the surface and take the reflected image
# AcquireStacksZStackTL - Used to take and save the Z stacks of transmitted light

# Processing settings files used:
# C1Z1.czips - Exports the single reflected light image
# C2AllZ.czips - Exports all the transmitted light image

import os
import random
import re
import shutil

def get_parameters():
    window = Zen.Windows.CreateWindow('Acquire image stacks')
    window.AddFolderBrowser('output_folder','Output folder')
    result = show(window)
    r = {}
    for k in [
        'output_folder',
    ]:
        r[k] = result.GetValue(k)
    return r

def set_magnification(suggestion):
    target_position = None
    suggestion_text = ""
    for i in range(0,Zen.Devices.ObjectiveChanger.ItemsCount):
        m = Zen.Devices.ObjectiveChanger.GetMagnificationByPosition(i)
        if m == suggestion:
            target_position = i
            suggestion_text = " (position {0})".format(i)
    if Zen.Devices.ObjectiveChanger.ActualPosition != target_position:
        Zen.Application.Pause(
            "Please set the objective to {0}x{1}, then click Continue.".format(
                suggestion,
                suggestion_text
            )
        )

def discard_changes(e):
    dummy_name = 'dummy{0:04d}'.format(random.randint(0,9999))
    e.SaveAs(dummy_name)
    e.Delete()
    e.Close()

def get_image():
    doc = Zen.Application.ActiveDocument
    if doc and 1 &lt; int(doc.Metadata.TilesCount):
        w = Zen.Windows.CreateWindow('Use current image?')
        rs = {
            'Yes, I want to use this image as the map': True,
            'No, I want to acquire another tiled image': False
        }
        w.AddDropDown(
            'current',
            'The current image has multiple tiles,\nis this what you want to use?',
            rs.keys(),
            0
        )
        if rs[show(w).GetValue('current')]:
            return doc
    set_magnification(10)
    exp = Zen.Acquisition.Experiments.GetByName("AcquireStacksTileTL")
    Zen.Acquisition.StartLive()
    Zen.Application.Pause('Find a corner and click Continue')
    x1 = Zen.Devices.Stage.ActualPositionX
    y1 = Zen.Devices.Stage.ActualPositionY
    Zen.Application.Pause('Now find the opposite corner and click Continue')
    x2 = Zen.Devices.Stage.ActualPositionX
    y2 = Zen.Devices.Stage.ActualPositionY
    z = Zen.Devices.Focus.ActualPosition
    if x2 &lt; x1:
        x2,x1 = x1,x2
    if y2 &lt; y1:
        y2,y1 = y1,y2
    w = x2 - x1
    h = y2 - y1
    exp.AddRectangleTileRegion(0, x1 + w/2, y1 + h/2, w, h, z)
    tiles = Zen.Acquisition.Execute(exp)
    discard_changes(exp)
    return tiles

def get_rois(doc):
    return filter(lambda g: g.Category == ZenGraphicCategory.Rectangle, doc.Graphics)

class UserCancelledException(Exception):
    pass

def show(window):
    r = window.Show()
    if r.HasCanceled:
        raise UserCancelledException("Operation cancelled")
    return r

def get_map(doc):
    rois = get_rois(doc)
    if 0 &lt; rois.Count:
        w = Zen.Windows.CreateWindow()
        w.AddTextBlock(
            "The current document has {0} rectangles. Do you want to add more ROIs to acquire?".format(
                rois.Count
            )
        )
        options = {
            "Yes, I'd like to add more rectangles": True,
            "No, please use just the existing rectangles": False
        }
        w.AddDropDown("add-more", "Add new rectangles?", options.keys(), 1)
        r = show(w).GetValue("add-more")
        if not options[r]:
            return rois
    view = Zen.Application.DocumentViews.Find(doc)
    view.ActiveViewType = ZenDocumentView.Image2D
    Zen.Application.Pause(
        'Select the "Graphics" tab under the image, '
        + 'select the "Draw Rectangle" tool (solid rectangle) and check "Keep Tool" box. '
        + 'When you have added all the Regions of Interest, click "Continue"'
    )
    return get_rois(doc)

def delete_existing_if_user_wants(grain_folders, max_existing):
    w = Zen.Windows.CreateWindow()
    w.AddTextBlock(
        "The selected output folder already has {0} grain image stacks. Do you want to delete them?".format(
            len(grain_folders)
        )
    )
    options = {
        "No, add the new grains after the current ones": False,
        "Yes, please DELETE the existing grain images": True
    }
    w.AddDropDown(
        "delete-existing",
        "Delete existing grain image stacks?",
        options.keys(),
        0
    )
    r = show(w).GetValue('delete-existing')
    if not options[r]:
        return max_existing + 1
    for f in grain_folders:
        shutil.rmtree(f)
    return 1

grain_name_matcher = re.compile(r'Grain([0-9]+)$')

def get_initial_count(folder):
    if not os.path.isdir(folder):
        os.mkdir(folder)
        return 1
    max_existing = 0
    grain_folders = []
    for f in os.listdir(folder):
        m = grain_name_matcher.match(f)
        if m:
            n = int(m.group(1))
            grain_folders.append(os.path.join(folder, f))
            if max_existing &lt; n:
                max_existing = n
    if grain_folders == []:
        return 1
    return delete_existing_if_user_wants(grain_folders, max_existing)

def move_to_roi(doc, roi):
    """
    Move stage to the position of the ROI `roi` from the document `doc`
    """
    scale = doc.Scaling
    origin = doc.GetPositionLeftTop()
    x = roi.Bounds.X + roi.Bounds.Width/2
    y = roi.Bounds.Y + roi.Bounds.Height/2
    sx = origin.X + x * scale.X
    sy = origin.Y + y * scale.Y
    Zen.Devices.Stage.MoveTo(sx, sy)

def acquire_roi(output_folder, sub_folder):
    focus = Zen.Devices.Focus.ActualPosition
    exp_rl = Zen.Acquisition.Experiments.GetByName("AcquireStacksFocusRL")
    Zen.Acquisition.FindAutofocus(exp_rl)
    exp_rl.Close()
    exp_z = Zen.Acquisition.Experiments.GetByName("AcquireStacksZStack")
    stack = Zen.Acquisition.Execute(exp_z)
    exp_z.Close()
    Zen.Devices.Focus.MoveTo(focus)
    ps = Zen.Processing.Utilities.Settings.SingleFileExportSetting()
    for setting in ['C1Z1.czips', 'C2AllZ.czips']:
        ps.Load(setting)
        ps.DestinationFolder = output_folder
        ps.Prefix = sub_folder
        Zen.Processing.Utilities.ExportSingleFile(stack, ps)
    stack.Close()

def acquire_for_all_rois(doc, output_folder, count):
    move_to_roi(doc, get_rois(doc)[0])
    set_magnification(20)
    exp_rl = Zen.Acquisition.Experiments.GetByName("AcquireStacksCoarseFocusRL")
    Zen.Acquisition.FindAutofocus(exp_rl)
    for roi in get_rois(doc):
        move_to_roi(doc, roi)
        acquire_roi(output_folder, "Grain{0:02d}".format(count))
        count += 1

try:
    # 1) Is there a nice big image that could be used?
    # 2) Acquire new image if required
    doc = get_image()
    # 3) Are there ROIs on the image?
    # 4) Instruct user on how to add ROIs
    rois = get_map(doc)
    # 5) Ask the user for the folder to put the output in
    # 6) If required, as the user if they want to delete existing contents or add to it
    params = get_parameters()
    count = get_initial_count(params['output_folder'])
    # 7) Ask the user to switch to the higher magnification
    # 8) Acquire stacks
    acquire_for_all_rois(doc, params['output_folder'], count)
    Zen.Application.Pause("Done!")
except UserCancelledException as uce:
    Zen.Application.Pause(uce.message)
</Text>
  <Author></Author>
  <Description></Description>
  <Keywords></Keywords>
  <Row>68</Row>
  <Column>69</Column>
</Script>